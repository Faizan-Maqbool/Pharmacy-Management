{"ast":null,"code":"// services/api.js - API service for interacting with backend\n\n// Base URL for API requests\nconst API_BASE_URL = '/api';\n\n/**\r\n * Get all products from the database\r\n * @returns {Promise<Array>} Array of products\r\n */\nexport async function getProducts() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products`);\n    if (!response.ok) {\n      throw new Error(`Error fetching products: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error in getProducts:\", error);\n    return []; // Return empty array on error\n  }\n}\n\n/**\r\n * Add a new product to the database\r\n * @param {Object} product - Product object to add\r\n * @returns {Promise<Object>} Added product with _id\r\n */\nexport async function addProduct(product) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(product)\n    });\n    if (!response.ok) {\n      throw new Error(`Error adding product: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error in addProduct:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Delete a product from the database\r\n * @param {string} productId - ID of product to delete\r\n * @returns {Promise<Object>} Response object\r\n */\nexport async function deleteProduct(productId) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products/${productId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error(`Error deleting product: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error in deleteProduct:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Update a product in the database\r\n * @param {string} productId - ID of product to update\r\n * @param {Object} productData - Updated product data\r\n * @returns {Promise<Object>} Updated product\r\n */\nexport async function updateProduct(productId, productData) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products/${productId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(productData)\n    });\n    if (!response.ok) {\n      throw new Error(`Error updating product: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error in updateProduct:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","getProducts","response","fetch","ok","Error","statusText","json","error","console","addProduct","product","method","headers","body","JSON","stringify","deleteProduct","productId","updateProduct","productData"],"sources":["C:/Users/PMLS/Desktop/Pharmacy Management/pharmacy-management/client/src/services/api.js"],"sourcesContent":["// services/api.js - API service for interacting with backend\r\n\r\n// Base URL for API requests\r\nconst API_BASE_URL = '/api';\r\n\r\n/**\r\n * Get all products from the database\r\n * @returns {Promise<Array>} Array of products\r\n */\r\nexport async function getProducts() {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/products`);\r\n    if (!response.ok) {\r\n      throw new Error(`Error fetching products: ${response.statusText}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error in getProducts:\", error);\r\n    return []; // Return empty array on error\r\n  }\r\n}\r\n\r\n/**\r\n * Add a new product to the database\r\n * @param {Object} product - Product object to add\r\n * @returns {Promise<Object>} Added product with _id\r\n */\r\nexport async function addProduct(product) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/products`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(product),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error adding product: ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error in addProduct:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a product from the database\r\n * @param {string} productId - ID of product to delete\r\n * @returns {Promise<Object>} Response object\r\n */\r\nexport async function deleteProduct(productId) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/products/${productId}`, {\r\n      method: 'DELETE',\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error deleting product: ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error in deleteProduct:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Update a product in the database\r\n * @param {string} productId - ID of product to update\r\n * @param {Object} productData - Updated product data\r\n * @returns {Promise<Object>} Updated product\r\n */\r\nexport async function updateProduct(productId, productData) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/products/${productId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(productData),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error updating product: ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error in updateProduct:\", error);\r\n    throw error;\r\n  }\r\n}"],"mappings":"AAAA;;AAEA;AACA,MAAMA,YAAY,GAAG,MAAM;;AAE3B;AACA;AACA;AACA;AACA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,WAAW,CAAC;IACxD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4BH,QAAQ,CAACI,UAAU,EAAE,CAAC;IACpE;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE,CAAC,CAAC;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeE,UAAUA,CAACC,OAAO,EAAE;EACxC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,WAAW,EAAE;MACvDY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBH,QAAQ,CAACI,UAAU,EAAE,CAAC;IACjE;IAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeS,aAAaA,CAACC,SAAS,EAAE;EAC7C,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,aAAakB,SAAS,EAAE,EAAE;MACpEN,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BH,QAAQ,CAACI,UAAU,EAAE,CAAC;IACnE;IAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeW,aAAaA,CAACD,SAAS,EAAEE,WAAW,EAAE;EAC1D,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,aAAakB,SAAS,EAAE,EAAE;MACpEN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAAClB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BH,QAAQ,CAACI,UAAU,EAAE,CAAC;IACnE;IAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}